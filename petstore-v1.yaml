openapi: 3.0.2

info:
  description: | # Required
    This is a sample server Petstore server.  You can find out more about
        Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For
        this sample, you can use the api key `special-key` to test the authorization filters.
  version: 1.0.0 # Required
  title: Swagger Petstore # Required
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

tags:
  - name: pet
    description: The pet api resource, everthing you need to interact with this data
    externalDocs:
      description: Here are the external docs for the pet api (business logic, use cases, edge cases )
      url: jira.confluence.com/petexample_documentation
  - name: store
    description: Access to the store api. Users can place orders, administrators can manage orders
  - name: user
    description: User api. Create and manage users within the applicaiton
paths:
  /pet:
    post:
      tags:
      - pet
      summary: Add a new pet to the petstore #
      description: '' # These descriptions are mostly implicit, but for more complex operations or specific business logic - more details can be added here
      operationId: addPet # Operation id should be unique
      responses:
        '405':
          description: Invalid input # These are not exhaustive, as http request pass through many layers that devs do not have control over.
      requestBody:
        $ref: "#/components/requestBodies/Pet" # Reusable Request bodies do conform to spec, but some generators and tooling don't necessarily support this fully
                                                # In which case you can reference a schema component
    put:
      tags:
      - pet
  /pet/{id}:
    get:
      tags:
      - pet
    delete:
      tags:
      - pet
  /pet/findByStatus:
    get:
      tags:
      - pet
  /store/order:
    post:
      tags:
      - store
    get:
      tags:
      - store
  /store/order/{id}:
    get:
      tags:
      - store
    delete:
      tags:
      - store
  /user:
    post:
      tags:
      - user
    put:
      tags:
      - user
  /user/{id}:
    get:
      tags:
      - user
    delete:
      tags:
      - user
  /user/login:
    get:
      tags:
      - user
  /user/logout:
    get:
      tags:
      - user

components:
  # Reusable schemas (data models)
  schemas:
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          "$ref": "#/components/schemas/Category"
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            "$ref": "#/components/schemas/Tag"
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
  # Reusable path, query, header and cookie parameters
  parameters:
    ...
  # Security scheme definitions (see Authentication)
  securitySchemes:
    ...
  # Reusable request bodies
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Pet"
        application/xml:
          schema:
            "$ref": "#/components/schemas/Pet"
      description: Pet object that needs to be added to the store
      required: true
  # Reusable responses, such as 401 Unauthorized or 400 Bad Request
  responses:
    ...
  # Reusable response headers
  headers:
    ...
  # Reusable examples
  examples:
    ...
  # Reusable links
  links:
    ...
  # Reusable callbacks
  callbacks:
    ...


